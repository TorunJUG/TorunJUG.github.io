---
layout: post
title: "Spotkanie #28 [2016-12-21]"
description: "Toruń JUG - Spotkanie #28 [2016-12-21]"
date: 2016-12-09 06:30:00 +0100
comments: true
categories: Spotkania
---
Zapraszamy serdecznie na dwudzieste ósme spotkanie Toruń Java Users Group, które odbędzie się **w&nbsp;środę, 21 grudnia 2016 roku w&nbsp;godzinach 18:00-20:00 w&nbsp;sali S9 na Wydziale Matematyki i Informatyki UMK** (<a href="https://www.google.pl/maps/place/Fryderyka+Chopina+12%2F18,+Toruń/" target="_blank"><span class="glyphicon glyphicon-map-marker"></span>ul. Chopina 12/18</a>).

Wstęp na spotkanie jest **wolny**, obecność na wcześniejszych spotkaniach nie jest wymagana - pomiędzy spotkaniami nie ma żadnych zależności, do naszej społeczności można dołączyć w **dowolnym** momencie. Na spotkanie możesz przyjść bez rejestracji na portalu Meetup, jednak chcielibyśmy zachęcić Cię do  kliknięcia w RSVP - osoby, które <a href="http://www.meetup.com/Torun-JUG/events/236115870/" target="_blank">zapiszą się</a> na to spotkanie wezmą udział w losowaniu kilku cennych upominków.

<div class="row text-center" style="margin-bottom:10px;">
  <div class="col-md-12">
    <img class="no-border" src="{{ root_url }}/images/meetings/28/cover.png" />
  </div>
</div>

Po spotkaniu zapraszamy tradycyjnie na małe afterparty do pubu <a href="https://www.facebook.com/carpekraft/" target="_blank"><strong>Carpe Kraft</strong></a> (<a href="https://www.google.pl/maps/place/Carpe+Kraft+Toru%C5%84/@53.0120765,18.6028162,19z/data=!4m2!3m1!1s0x0000000000000000:0xd4a984360753f841?hl=pl" target="_blank"><span class="glyphicon glyphicon-map-marker"></span>ul. Plac Teatralny 7</a>). Będzie można pogadać na najróżniejsze tematy, poznać się lepiej i napić najlepszego piwa w Toruniu :)

<div class="row text-center" style="margin-bottom:10px;">
  <div class="col-md-12">
    <img class="no-border" src="{{ root_url }}/images/meetings/28/afterparty.png" />
  </div>
</div>

**UWAGA:** Sala S9 będzie otwarta **od godz. 17:30** - jeśli chcesz przyjść wcześniej i pogadać z uczestnikami spotkania to będzie to najlepsza do tego okazja :) <!-- more -->

### Kariera freelancera krok po kroku
Pogadajmy o freelancingu. Bez mędrkowania, teoretyzowania oraz prób ewangelizacji. W trakcie tej 45-minutowej dyskusji z prezentacją w tle chciałbym podzielić się z Wami tym, czego doświadczyłem i nauczyłem się przez ostatnie 2,5 roku - począwszy od ostatnich miesięcy spędzonych na etacie po dzień dzisiejszy. Opowiem o motywacjach, obawach, sukcesach i porażkach. Spróbuję obalić niektóre mity dotyczące freelancingu i pracy na własną rękę. W prezentacji pojawi się również kilka bardziej uniwersalnych wniosków, które mogą okazać się pomocne także dla tych z Was, którzy nie planują wiązać swojej kariery z freelancingiem. 

<img class="no-border speaker-face" src="{{ root_url }}/images/speakers/stepniak-szymon.jpg" />
#### <a href="https://twitter.com/wololock" target="_blank">Szymon Stępniak</a>
Programista z ponad ośmioletnim doświadczeniem, freelancer (od września 2014) współpracujący na co dzień z firmami i startupami z USA, Australii i Szwajcarii. Posiadacz tytułu "Top Rated" w serwisie UpWork. Wolne chwile spędza z rodziną, gitarą lub książką.

<span class="clearfix"></span>

### Keep IT clean, or how to hide your shit
Do you know why the default scope in Java is package-private? Because that's what designers thought should be the most popular scope. Is that the scope you most often see? Probably not. Somehow Java devs became crazy communists-capitalists, recognising only private and public access, and preferring public everywhere. And so our projects look like a lawn right after snow melts: full of shit laying in public. Hard to put into your head. Hard to reason about. Entanglement instead of encapsulation. People even register every possible class in an IoC container, because FU (nctional) programming, that's why. You wanna find something in my code? Google it.

Or how about inheritance? James Gosling asked in 2001 about what he would do differently if he had a chance to recreate Java, said he would probably remove class inheritance. We are in 2016, having lambdas, defaults on interfaces, AOP and other tricks, but young developers still prefer to just add another abstract class to your code. Gonna be fun navigating those seven layers of hell when you read it.

Ok, maybe it's not THAT bad, but it's not much better either. The problem of course, is that we all start with tutorials, which cut corners for brevity. And we don't pay attention to those small problems till they hit us hard. 

Let's see how we can make our situation a little bit better, using Domain Driven Design, package-private scope, sensible packaging structure, and CQRS on microservices. Because it is actually easier, than not doing it.

Real life project examples included.

<em style="display:block;margin-bottom:32px;"><b>UWAGA:</b> pomimo angielskiego opisu, prezentacja będzie po polsku.</em>

<img class="no-border speaker-face" src="{{ root_url }}/images/speakers/nabrdalik-jakub.jpg" />
#### <a href="https://twitter.com/jnabrdalik" target="_blank">Jakub Nabrdalik</a>
A software developer with 13 years of professional experience in IT, as an architect, programmer, designer, analyst, project leader, project manager, and even as a development department manager. 6 years of talks and workshops. Software Craftsmanship, Domain Design, Practicing Test-driven development and Spring. More at <a href="http://solidcraft.eu" target="_blank">solidcraft.eu</a>.